De workshop is al volgt:

- Introductie: leg uit wat ConfigMaps zijn en waarom ze nuttig zijn in Kubernetes.
- Aan de slag: laat zien hoe je een ConfigMap maakt met behulp van een YAML-configuratiebestand. Leg uit welke velden er zijn en wat ze betekenen.
- Gebruik van ConfigMap: laat zien hoe je een ConfigMap gebruikt in een Kubernetes-pod. Leg uit hoe je de ConfigMap als environmentvariabelen of als volumes gebruikt.
- Updaten van ConfigMaps: leg uit hoe je een ConfigMap kunt updaten zonder de pods te hoeven herstarten.
- Tips & Tricks: geef enkele best practices weer voor het beheren van ConfigMaps in Kubernetes, zoals het gebruik van ConfigMap-generatoren of het opsplitsen van ConfigMaps in kleinere ConfigMaps voor specifieke componenten.
- Vragen: open de sessie voor vragen van de deelnemers.

De workshop zou ongeveer 30 minuten duren, afhankelijk van de hoeveelheid tijd die je besteedt aan demonstraties en oefeningen.

# Wat zijn ConfigMaps
ConfigMaps in Kubernetes zijn een manier om configuratie-instellingen te centraliseren en te beheren voor uw pods en
services. Ze kunnen worden gebruikt om bijvoorbeeld de configuratie van een applicatie of een database te beheren.

Met ConfigMaps kun je bijvoorbeeld:

- configuratie-instellingen scheiden van de container-images en van de pod-definities.
- configuratie-instellingen dynamisch aanpassen zonder de pods te hoeven herstarten.
- een set configuratie-instellingen delen tussen meerdere pods.

Door configuratie-instellingen in ConfigMaps op te slaan in plaats van in de pod-definities of container-images, kunt u
de configuratie gemakkelijker beheren en wijzigen, zonder dat je de pod of container hoeft te herstarten. Bovendien maakt
het ook het werkproces van testen en deployen gemakkelijker omdat je niet hoeft te werken met hardcoded configuraties in
de images.

# Wat zijn Secrets
Secrets in Kubernetes is een manier om key-value waarden in een pod te laten zien. Zoals wachtwoorden en instellingen, maar meestal wachtwoorden, tokens of een key. Op deze manier heeft je applicatie geen gevoelige data meer in zijn code.
Secrets en ConfigMaps hebben veel met elkaar gemeen. Maar zijn wel bedoeld voor de gevoelige data.

Secrets kun je op 2 manieren laten tonen in een pod:
- Als een container environment variable
- Als een bestand gemount in een container

Er kunnen verschillende typen Secrets gemaakt worden waarmee je de inhoud van de secret zou kunnen valideren. Als er niets wordt ingevuld bij het `type` wordt er standaard `opaque` gebruikt.

# Hoe maak je een ConfigMap
Om een ConfigMap te maken zonder hulp van een YAML-configuratiebestand, kun je het `kubectl create configmap` gebruiken. Alleen dit druist in tegen de gitops manier van werken. Alles moet uit een repo komen.
Daarom dus een `.yaml` aanmaken en zorgen dat dat in de repo komt.
Hier is een voorbeeld van een YAML-configuratiebestand voor een ConfigMap:

```yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  app.property1: value1
  app.property2: value2
```

In dit voorbeeld:

- `apiVersion` en `kind` definieren dat dit een ConfigMap is voor Kubernetes.
- `metadata` bevat informatie over de ConfigMap, zoals de naam.
- `data` bevat de daadwerkelijke configuratie-instellingen in de vorm van key-value.

Je kunt de configmap met de volgende commando aanmaken:
```bash
kubectl create -f configmap.yaml
```
Je kunt ook configmap aanmaken door gebruik te maken van kubectl commando's:
```bash
kubectl create configmap app-config --from-literal=app.property1=value1 --from-literal=app.property2=value2
```
Je kunt ook configmap aanmaken door gebruik te maken van een bestand:
```bash
kubectl create configmap app-config --from-file=app.properties
```
Je kunt ook configmap aanmaken door gebruik te maken van een map:
```bash
kubectl create configmap app-config --from-file=configs/
```
Als je een configmap wilt updaten dan kunt je het kubectl edit commando of kubectl apply gebruiken.

Met bovenstaande commandos en YAML-configuratiebestanden kunt je een ConfigMap maken en beheren in Kubernetes.

# Hoe maak je een secret
Om een secret te maken zonder hulp van een YAML-configuratiebestand, kun je het `kubectl create secret` commando gebruiken.
Dit is een lastige met de gitops manier van werken. Je wilt immers niet dat wachtwoorden in een git repo gezet worden.
Ik zie nog wel eens dat de secrets via een HC Vault server aangemaakt worden. (gebruiken we nu niet)
Hier is een voorbeeld van een YAML-configuratiebestand voor een Secret:
```yaml
apiVersion: v1
kind: Secret
metadata:
  name: mysecret
type: Opaque
data:
  USER_NAME: YWRtaW4=
  PASSWORD: MWYyZDFlMmU2N2Rm
```

In dit voorbeeld:
-  `apiVersion` en `kind` definieren dat dit een Secret is voor Kubernetes.
-  `metadata` bevat informatie over de Secret, zoals de naam.
- `data` bevat de daadwerkelijke configuratie-instellingen in de vorm van key-value.

Je kunt de Secret aanmaken door gebruik te maken van kubectl commando's:
```bash
kubectl create secret generic prod-db-secret --from-literal=username=produser --from-literal=password=Y4nys7f11
```
Je kunt de Secret aanmaken door gebruik van bestanden:
```bash
kubectl create secret generic ssh-key-secret --from-file=ssh-privatekey=/path/to/.ssh/id_rsa --from-file=ssh-publickey=/path/to/.ssh/id_rsa.pub
```
Als je een Secret wilt updaten kun je dat met `kubectl edit` commando of `kubectl apply` gebruiken.

# Gebruik van ConfigMaps en Secrets
Er zijn twee manieren om een ConfigMap en Secret te gebruiken in een Kubernetes pod: als environmentvariabelen of als volumes.

1. Gebruik als environmentvariabelen:
U kunt configuratie-instellingen uit een ConfigMap gebruiken als environmentvariabelen in een pod-definitie. Hier is een voorbeeld van hoe je dit kunt doen in een YAML-pod-definitie:
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: app-pod
spec:
  containers:
  - name: app-container
    image: registry.k8s.io/busybox
    command: [ "/bin/sh", "-c", "env" ] # of echo $USER_NAME
    envFrom:
    - secretRef:
        name: mysecret
    env:
    - name: PROPERTY1
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: app.property1
    - name: PROPERTY2
      valueFrom:
        configMapKeyRef:
          name: app-config
          key: app.property2

```
In dit voorbeeld worden de waarden van app.property1, app.property2 en mysecret uit de ConfigMap en Secrets gebruikt als de environmentvariabelen PROPERTY1 en PROPERTY2 en USER_NAME en PASSWORD in de container app-container.

2. Gebruik als volumes:
U kunt configuratie-instellingen ook als bestanden in een volume mounten in een pod. Hier is een voorbeeld van hoe je dit kunt doen in een YAML-pod-definitie:
```yaml
apiVersion: v1
kind: Pod
metadata:
  name: app-pod
spec:
  containers:
  - name: app-container
    image: registry.k8s.io/busybox
    command: [ "/bin/sh", "-c", "ls -sla /etc/config /etc/secrets" ]
    volumeMounts:
    - name: config-volume
      mountPath: /etc/config
    - name: secret-volume
      mountPath: /etc/secrets
  volumes:
  - name: config-volume
    configMap:
      name: app-config
  - name: secret-volume
    secret:
      secretName: mysecret
```
In dit voorbeeld wordt de ConfigMap en de Secret gebruikt als volume met de naam `config-volume` en `secret-volume` en gemonteerd op `/etc/config`  en `/etc/secrets`  in de container `app-container`. De configuratie-instellingen zijn dan beschikbaar als bestanden in de container.

Houd er rekening mee dat als je je configuratie aanpast in de configmap of secret, de veranderingen niet automatisch doorgevoerd worden in de pod, je moet de pod herstarten of de configmap of de secret te updaten.

# ConfigMap updaten zonder pod herstart
Er zijn een paar manieren om een ConfigMap te updaten zonder dat je de pods hoeft te herstarten:

1. Gebruik `kubectl edit` om de ConfigMap aan te passen: Je kunt de ConfigMap bewerken met behulp van het `kubectl edit` commando en de veranderingen op deze manier toepassen. Dit zal de ConfigMap updaten zonder de pods te hoeven herstarten.
```bash
kubectl edit configmap app-config
```
2. Gebruik `kubectl apply` om de ConfigMap aan te passen: Je kunt de ConfigMap updaten met behulp van het `kubectl apply` commando en de veranderingen op deze manier toepassen. Dit zal de ConfigMap updaten zonder de pods te hoeven herstarten.
```bash
kubectl apply -f updated-configmap.yaml
```
3. Gebruik `kubectl patch` om de ConfigMap aan te passen: Je kunt de ConfigMap updaten met behulp van het `kubectl patch` commando. Dit commando maakt het mogelijk om specifieke veranderingen aan te brengen in de ConfigMap zonder de hele configmap opnieuw te vervangen.
```bash
kubectl patch configmap app-config --patch '{"data": {"new-property": "new-value"}}'
```
Let op dat als je ConfigMap gebruikt als een volume in een pod, sommige veranderingen in de ConfigMap nog steeds niet zichtbaar zijn voor de pod. Dit komt omdat de pod de bestanden in het volume niet automatisch opnieuw leest. In deze gevallen zou je de pod moeten herstarten of gebruik maken van een mechanisme dat de inhoud van het volume opnieuw leest.

Als je ConfigMap gebruikt als een environment variabele in een pod, zal de pod de veranderingen onmiddellijk oppakken omdat de environment variabele opnieuw ingelezen worden bij het opstarten van de pod.

# Best practices voor het beheren van ConfigMaps
1. Gebruik ConfigMap-generatoren: Je kunt configuratie-instellingen automatisch genereren met behulp van tools zoals kustomize of konfig. Dit kan handig zijn als je bijvoorbeeld configuratie-instellingen wilt genereren voor verschillende omgevingen of als je configuratie-instellingen wilt genereren vanuit een extern systeem.

2. Opsplitsen van configmaps in kleinere configmaps voor specifieke componenten: In plaats van één grote ConfigMap te gebruiken voor alle configuratie-instellingen, kunt je configuratie-instellingen opsplitsen in kleinere ConfigMaps voor specifieke componenten of doelen. Dit kan helpen bij het beheer en debuggen van configuratie-instellingen.

3. Gebruik namespace-specifieke ConfigMaps: ConfigMaps worden gedeeld tussen alle namespaces in een cluster, omdat ze cluster-breed zijn. Je kunt namespace-specifieke ConfigMaps gebruiken voor configuratie-instellingen die alleen van toepassing zijn op een specifieke namespace.

4. Beveiliging: Zorg ervoor dat je toegang tot de ConfigMap beperkt tot alleen de pods die de configuratie-instellingen nodig hebben. Dit kan worden gedaan door gebruik te maken van Kubernetes-rollen en -rollenbewijzen.

5. Documentatie: Voeg commentaar toe aan uw ConfigMap-definities om aan te geven waarvoor de configuratie-instellingen zijn en hoe ze worden gebruikt. Dit kan helpen bij het begrijpen en onderhouden van de configuratie-instellingen.

6. Versionering: Houdt bij welke versie van de configuratie-instellingen in gebruik is, zodat je kunt terugvallen naar een vorige versie als er problemen optreden.

7. Testen: Test de configuratie-instellingen voordat je ze toepast op een productieomgeving. Dit kan helpen om problemen op te sporen voordat ze zich voordoen in een productie-omgeving.

_Met dank aan ChatGPT_
